name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Run unit tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build Kim binary
      run: go build -o kim ./cmd/kim

    - name: Start Kafka cluster
      run: |
        docker-compose -f docker-compose.test.yml up -d --wait

        # Wait for Kafka to be fully ready
        echo "Waiting for Kafka to be ready..."
        timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml exec -T kafka kafka-broker-api-versions --bootstrap-server localhost:9092; do sleep 2; done'

    - name: Run integration tests
      run: |
        cd test
        go test -v -timeout=10m -tags=integration ./...

    - name: Show Kafka logs on failure
      if: failure()
      run: |
        echo "=== Kafka Logs ==="
        docker-compose -f docker-compose.test.yml logs kafka
        echo "=== Zookeeper Logs ==="
        docker-compose -f docker-compose.test.yml logs zookeeper

    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v --remove-orphans

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, integration-test]

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ "$VERSION" == "refs/heads/"* ]]; then
          VERSION=${GITHUB_SHA::8}
        fi

        BINARY_NAME=kim
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME=kim.exe
        fi

        mkdir -p build
        go build -ldflags "-X main.Version=$VERSION -X main.Commit=$GITHUB_SHA -X main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o build/${BINARY_NAME}-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/kim

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kim-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/kim*

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Install Gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: gosec ./...
